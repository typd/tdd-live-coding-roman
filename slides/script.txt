- Test Case
- Case fail
- Write Code
- Case pass
- Refactoring
- Case pass

- Repeat ...

_________
1 => I case
fail
1 => I code
pass
_________
2 => II case
fail
2 => II code
pass
_________
5
5 => V case
fail
5 => V code
pass
_________
change assert, to assertResult function
pass
_________
6,7 case
fail
6,7 code
pass
_________
refactor
  see 1-2,5-7 table
  focus on these 5 cases
  if > 5, "V", left * "I"
pass
_________
3,8 case
pass
_________
0,<0 case, error handling?
fail
<=0 code
pass
_________
use int or Integer?
change Integer to int
_________
4,9 case
fail
show -1 to 13 table
mod and handle
pass
_________
10,11,13 case
pass
_________
show L C D M, and cases
ask solution
_________
refactoring, split to digits
_________
add more cases
14
19
20
40
99
100
101
499
500
501
999
1000
1234
2016
3999
4000
_________
summary
review code
devide problem into smaller ones
=========
convert string roman to int
write cases 1 to 9
fail
_________
show examples
split into digits
show table
_________


where to start
    check null
    confirm test framework is all right, project, debuggable
where to continue
    solution to drive to code
    map
where to skip
    increase duplication before we can recoginze
    rule of 3
    refactoring balance

________________

baby steps
    start to confirm everything is all right
    response fast
Unit
    搬砖 重构 复用

minimum viable product
    satisfy time
path
    where to start not important
    correct direction
    fail fast
    know the whole when you can see
new thinking
    don't care about the implementation too much
    result driven
    TDD is not writing unit tests, TDD is a way of writing code.
    Tests can be good documents
    confidence

In practice, you never have time after the code is written
but under TDD, you always have the time before

"If you can't write a test, then you don't know what the code should do. And what business do you have writing code in the first place when you can't say what it's supposed to do?" - Rob Mee

Tests Are An Extension of Code
    Test code is not "wasted" or "extra" -- tests are first-class citizens

Test everything that could possibly break
    don't test things that couldn't possibly break
        e.g. Getters and Setters
        Unless you think they could fail!
        Better safe than sorry; test what you don't trust






